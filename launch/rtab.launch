<launch>
  <arg name="useGazebo" default="false"/>
  <arg name="isVisual" default="false"/>
  <arg name="explore" default="false"/>

  <arg name="odomL" default="false"/>
  <arg name="odomV" default="true"/>
  <arg name="odomW" default="false"/>

  <arg name="mappingWithLidar" default="true"/>

  <!-- Occupancy grid:true - from RGBD camera, false - from lidar-->
  <arg name="gridFromCamera" default="true"/>

  <group unless="$(arg useGazebo)">
    <node name="serial_node" pkg="rosserial_python" type="serial_node.py">
      <param name="port" type="string" value="/dev/ttyACM0"/>
      <param name="baud" type="int" value="57600"/>

      <remap from="odom" to="/wheel_odometry"/>
    </node>

    <node name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen" if="$(eval arg('mappingWithLidar') or arg('odomL'))">
      <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
      <param name="serial_baudrate"     type="int"    value="115200"/>
      <param name="frame_id"            type="string" value="base_scan"/>
      <param name="inverted"            type="bool"   value="false"/>
      <param name="angle_compensate"    type="bool"   value="true"/>

      <remap from="scan" to="/scan"/>
    </node>

    <include file="$(find realsense2_camera)/launch/rs_camera.launch">
       <arg name="align_depth" value="true"/>
       <arg name="filters" value="pointcloud"/>
    </include>

    <rosparam>
      /camera/stereo_module/emitter_enabled: 0
      /camera/stereo_module enable_auto_exposure: False
      /camera/stereo_module exposure: 18500
      /camera/stereo_module gain: 100
    </rosparam>
  </group>

  <!-- <remap from="cloud_in" to="/rtabmap/cloud_map"/>
  <remap from="map" to="/rtabmap/grid_map"/> -->

  <!-- Define robot's model -->
  <param name="robot_description" textfile="$(find stereo_nav)/urdf/newModel.xml"/>

  <!-- Publish robot's TF -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
    <param name="rate" value="50"/>
  </node>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0"/>
    <param name="tf_prefix" value=""/>
  </node>

  <group ns="rtabmap">
    <!-- Synchronize the data from stereo camera -->
    <node pkg="rtabmap_ros" type="rgbd_sync" name="rgbd_sync" output="screen">
      <remap from="rgb/image"         to="/camera/color/image_raw"/>
      <remap from="depth/image"       to="/camera/aligned_depth_to_color/image_raw"/>
      <remap from="rgb/camera_info"   to="/camera/color/camera_info"/>

      <param name="approx_sync" type="bool" value="true"/>
    </node>

    <!-- Stereo Odometry -->
    <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen" if="$(arg odomV)">
       <param name="subscribe_rgbd" type="bool" value="true"/>
       <remap from="odom" to="/rgbd_odometry"/>

       <param name="approx_sync" type="bool" value="true"/>

       <param name="frame_id"      type="string" value="base_footprint"/>
       <param name="odom_frame_id" type="string" value="odom"/>

       <!-- Сброс одного кадра после потери -->
       <param name="Odom/ResetCountdown" value="1" />

       <!-- Ограничем количество оцениваемых значений одометрии
       так как робот двигается только по плоской поверхности (x, y, theta)-->
       <param name="Reg/Force3DoF" value="true" />

       <param name="Odom/Strategy"      type="string" value="0"/> <!-- 0=Frame-to-Map, 1=Frame=to=Frame -->
       <param name="Vis/EstimationType" type="string" value="0"/> <!-- 0=3D->3D 1=3D->2D (PnP) -->
       <param name="Vis/MaxDepth"       type="string" value="10"/>
       <param name="Vis/MinInliers"     type="string" value="10"/>
       <!-- <param name="Odom/FillInfoData"  type="string" value="$(arg rtabmapviz)"/> -->
       <param name="GFTT/MinDistance"   type="string" value="10"/>
       <param name="GFTT/QualityLevel"  type="string" value="0.00001"/>
    </node>

    <!-- Lidar (ICP) Odometry -->
    <node pkg="rtabmap_ros" type="icp_odometry" name="icp_odometry" output="screen" if="$(arg odomL)">
       <remap from="scan" to="/scan"/>
       <remap from="odom" to="/icp_odometry"/>

       <param name="frame_id"      type="string" value="base_footprint"/>
       <param name="odom_frame_id" type="string" value="odom"/>

       <param name="Odom/Strategy"      type="string" value="0"/> <!-- 0=Frame-to-Map, 1=Frame=to=Frame -->
       <param name="Vis/EstimationType" type="string" value="0"/> <!-- 0=3D->3D 1=3D->2D (PnP) -->
       <param name="Vis/MaxDepth"       type="string" value="10"/>
       <param name="Vis/MinInliers"     type="string" value="10"/>
       <!-- <param name="Odom/FillInfoData"  type="string" value="$(arg rtabmapviz)"/> -->
       <param name="GFTT/MinDistance"   type="string" value="10"/>
       <param name="GFTT/QualityLevel"  type="string" value="0.00001"/>
    </node>

    <!-- Depth image to laser scan -->
    <!-- <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
        <param name="scan_height" value="10"/>
        <param name="output_frame_id" value="/camera_depth_frame"/>
        <param name="range_min" value="0.45"/>

        <remap from="image" to="/camera/aligned_depth_to_color/image_raw"/>
        <remap from="scan" to="/scan"/>
    </node> -->

    <!-- Visual SLAM args - "delete_db_on_start" -->
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">
      <param name="database_path"       type="string" value="~/.ros/rtabmap.db"/>
      <param name="frame_id"            type="string" value="base_footprint"/>

      <param name="subscribe_rgb"   type="bool" value="false"/>
      <param name="subscribe_depth" type="bool" value="false"/>

      <param name="subscribe_rgbd" type="bool" value="true"/>

      <param name="subscribe_scan" type="bool" value="$(arg mappingWithLidar)"/>

      <param name="use_action_for_goal" type="bool" value="true"/>
      <remap from="move_base" to="/move_base"/>

      <remap from="odom" to="/rgbd_odometry" if="$(arg odomV)"/>
      <remap from="odom" to="/icp_odometry" if="$(arg odomL)"/>
      <remap from="odom" to="/wheel_odometry" if="$(arg odomW)"/>

      <remap from="scan" to="/scan" if="$(arg mappingWithLidar)"/>

      <remap from="grid_map" to="/map"/>

      <!-- Всегда обновлять карту (даже без движения робота) полезно для динамических сред -->
      <param name="map_always_update" value="false"/>

      <param name="odom_frame_id" value="odom"/> <!-- adjust to actual odometry frame id -->
      <param name="odom_tf_linear_variance" value="0.01"/> <!-- adjust depending on real odom error -->
      <param name="odom_tf_angular_variance" value="0.05"/> <!-- adjust depending on real odom error -->

      <!-- Фильтрация облаков точек -->
      <!-- <param name="cloud_noise_filtering_radius" value="0.05"/> -->
      <!-- <param name="cloud_noise_filtering_min_neighbors" value="2"/> -->
      <param name="Grid/NoiseFilteringRadius" value="0.05"/>
      <param name="Grid/NoiseFilteringMinNeighbors" value="2"/>
      <!-- <param name="Grid/NoiseFilteringRadius" value="0"/> -->

      <!-- Частота детекции замыканий -->
      <param name="Rtabmap/DetectionRate"		type="string" value="2"/>

      <!-- Minimum visual inliers to accept loop closure -->
      <param name="Vis/MinInliers"  type="string" value="15"/>

      <!-- Максимальная ошибка при оптимизации графа -->
      <param name="RGBD/OptimizeMaxError" type="string" value="5.0"/>

      <!-- Wait loop closure and dont star building new map -->
      <param name="Rtabmap/StartNewMapOnLoopClosure" value="true"/>

      <!-- RTAB-Map's parameters -->
      <param name="Reg/Strategy" type="string" value="1"/>
      <!-- <param name="Reg/Force3DoF" type="string" value="true"/> -->
      <param name="GridGlobal/MinSize" type="string" value="20"/>

      <!-- Карта гарантированно плоская (робот движется только по плоскости)-->
      <!-- <param name="Optimizer/Slam2D" value="true" /> -->
      <param name="Reg/Force3DoF" value="true" />

      <!-- Occupancy grid from lidar - false, occupancy grid from camera - true -->
      <param name="Grid/FromDepth" type="string" value="$(arg gridFromCamera)"/>

      <!-- Карта также по близости сканирований -->
      <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="10"/>

      <!-- Размер ячейки карты -->
      <param name="Grid/CellSize" type="double" value="0.05"/>

      <!-- Высота на которой определеяются припятствия -->
      <param name="Grid/MaxObstacleHeight" value="0.5"/>

      <!-- Все плоскости на высоте 3см помечаются как препятствия -->
      <param name="Grid/MaxGroundHeight" type="string" value="0.03"/>
      <param name="Grid/MinGroundHeight" type="string" value="0.0"/>
      <param name="Grid/NormalsSegmentation"  type="string" value="false" />

      <!-- Заполняет свободной клеткой если видно препятствие вдали на луче -->
      <param name="Grid/RayTracing" value="true"/>

      <!-- Повышение точности RayTracing (true), тратит больше вычислительных ресурсов -->
      <param name="Grid/3D" value="true"/>

      <param name="Mem/IncrementalMemory" type="string" value="true"/>

      <!-- ICP parameters -->
      <param name="Icp/VoxelSize"                 type="string" value="0.05"/>
      <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.1"/>
    </node>

    <!-- Map fusion (not working), в данный момент настроен на вывод карты от лидара в топике /map_assembler/grid_map -->
    <node name="map_assembler" pkg="rtabmap_ros" type="map_assembler">
       <param name="Grid/CellSize" type="double" value="0.1"/>

       <param name="Grid/FromDepth" type="string" value="false"/>

       <param name="regenerate_local_grids" value="true"/>
    </node>

    <!-- Create point cloud for the local planner -->
    <node pkg="nodelet" type="nodelet" name="stereo_nodelet"  args="manager"/>

    <node pkg="nodelet" type="nodelet" name="points_xyz" args="standalone rtabmap_ros/point_cloud_xyz">
       <remap from="depth/image"         to="/camera/aligned_depth_to_color/image_raw"/>
       <remap from="depth/camera_info"   to="/camera/color/camera_info"/>
       <remap from="cloud"               to="voxel_cloud" />

       <param name="decimation"  type="double" value="4"/>
       <param name="voxel_size"  type="double" value="0.05"/>
       <param name="approx_sync" type="bool" value="false"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="obstacles_detection" args="load rtabmap_ros/obstacles_detection stereo_nodelet">
       <remap from="cloud" to="voxel_cloud"/>
       <remap from="obstacles" to="/obstacles_point_cloud"/>

       <param name="frame_id" type="string" value="base_footprint"/>
       <param name="map_frame_id" type="string" value="map"/>
       <param name="Grid/MinClusterSize" type="int" value="20"/>
       <param name="Grid/MaxObstacleHeight" type="double" value="0.5"/>
     </node>

    <!-- rtabmapviz -->
    <node pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen" if="$(arg isVisual)">
      <param name="subscribe_scan"   type="bool"   value="$(arg odomL)"/>
      <param name="subscribe_odom"   type="bool"   value="true"/>
      <param name="frame_id"         type="string" value="base_footprint"/>
      <param name="approx_sync"      type="bool"   value="true"/>

      <remap from="odom" to="/rgbd_odometry" if="$(arg odomV)"/>
      <remap from="odom" to="/icp_odometry" if="$(arg odomL)"/>
      <remap from="odom" to="/wheel_odometry" if="$(arg odomW)"/>
    </node>
  </group>

  <!-- move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find stereo_nav)/config/move_base/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find stereo_nav)/config/move_base/costmap_common_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find stereo_nav)/config/move_base/local_costmap_params.yaml" command="load"/>
    <rosparam file="$(find stereo_nav)/config/move_base/global_costmap_params.yaml" command="load"/>
    <rosparam file="$(find stereo_nav)/config/move_base/move_base_params.yaml" command="load"/>
    <rosparam file="$(find stereo_nav)/config/move_base/dwa_local_planner_params.yaml" command="load"/>

    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>

    <remap from="cmd_vel" to="/cmd_vel"/>
    <remap from="map" to="/map"/>

    <remap from="odom" to="/rgbd_odometry" if="$(arg odomV)"/>
    <remap from="odom" to="/icp_odometry" if="$(arg odomL)"/>
    <remap from="odom" to="/wheel_odometry" if="$(arg odomW)"/>
  </node>

  <!-- explore -->
  <node pkg="explore_lite" type="explore" respawn="true" name="explore" output="screen" if="$(arg explore)">
    <rosparam file="$(find stereo_nav)/config/exploration/exploration.yaml" command="load"/>
  </node>

  <!-- rviz -->
  <group if="$(arg isVisual)">
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find stereo_nav)/rviz/navigation_stereo.rviz"/>
  </group>
</launch>
